1. OOPs concept 
2. Everything will be in object - class (room - chair, desk etc
3. Java is 100% fully object based (OOPs)

This is not achieve C, C++ (platform dependent)
C, C++ we have to release the memory - gc (to release the memory)

1. JDK and JRE - Java Development Kit - exe file open source - Developers - writting the codes - Secure (WORA)

Write Once Run Anywhere - Platform Independent - 

JRE - Java Runtime Environment - Client side 


1. JDK-  Developing the code - Compile - getting a bytecode (.class file) (unreadable for humans) - execute in JRE
2. Garbage Collector - By default

JVM - Java Virtual Machine - Jdk, JRE

----------------------------------------
05-10-2022

1. Syntax for compie and run
Compiling  - javac FileName.java

Executing - java className



class Sample1
{
	//dataType variable_name = value; (= R->L) (== condition)
	static int num1=1;
	int num2=2;
	static float num3=1.3;
	static char val='C';

short,byte, int,long, float,double, char, boolean - Non-primitive datatype
//Primitive datatypes - Objects

	public static void main(String args[])
	{
		int aa=1;
		System.out.println(num1);
		System.out.println(num2);
	}
}


----- later-------
static, Non-primitiv data type, Access modifier and specifiers, For each loop


----------------------

OOPs
Everything will be in Object oriented.
100%
---- 

Create a class
create a main method
create methods using all the data types - return and one void method

create a object
call all the functions and print



--------------------------------------------
object method and methodName

class ObjSamp
{
	int a = 10;
	float b = 10.6f; // instance varibale or Objec variable

	// access_specifier return_type methodName(param1, param 2 or empty)
	public void print()
	{
		System.out.println(a);
	}

	public void print1()
	{
		System.out.println(b);
	}

	public void params(int aa, int bb,int cc) // local varibale
	{
		System.out.println(aa+bb);
	}

	public int add(int q, int w)
	{
		int f=q+w;
		return f;
	}

	public static void main(String args[])
	{
		ObjSamp obj=new ObjSamp();
//		invoke or call a method
		//objName.Method NAme(param1,param2 or empty);
		obj.params(1,2,3);

		int add=obj.add(10,20);
		System.out.println(add);
	}
}


---------------------------------------------------------

constructor method and  this keywords




class ConstSampleEx
{
	int x; // current object or current class instance variable
	
	public ConstSampleEx(int x) //Parameterized constructor
	{
		this.x=x;
		this.methodName();
		this();
		System.out.println("This is a constructor 1");
		return this;
	}

	public static void main(String args[])
	{
		ConstSampleEx cs=new ConstSampleEx(); //an instance (object) of the class is created
		ConstSampleEx cs1=new ConstSampleEx(1);
		cs1.x=2; // correct
		cs.print();
	}  
}


// Constructor & this -- 
1. program with method of return type (int, float, char, double, long) // 5 metohds
   Create a constructor & use this keyword to call the method and variables.



=========================================================================
INHERITANCE


Parent child relationship. 
BaseClass subclass relationship - it acquires base class properties like variables, objects if access provided.

access specifiers - public, private, protected & default

1. Single level inheritance - Parent class and one subclass
2. Multilevel Inheritance - Parent class, one & many subclasses
3. Hierarchical Inheritance - One Parent class , two or more subclass for one parent class
4. Hybrid inheritance
5. Multiple inheritance - it is not possible / not supported. because java willget confuse. - two base class for one sub class

------
Method Overriding & Overloading

Method overriding - Runtime polymorphism
Ony on inheritance
Base class one and one or more subclass - same method name, same return type and same parameters

 super keyword is use to refer the parent class objects, methods.


Method overloading - compile time polumorphism
No inheritance
SAme method name, same return type but different parameters


---------------------------------------------------
Array-

It is an index based object to store the  data in ordered sequence .

0,1,2,3,4,5,


example:

class ArraySample {
	public static void main (String args[]) {

		// Syntax
		// Class-or-datatype name[] = new Class-or-datatype[size]; // similar datatype

		// One method of declaration // dynamic
		char arr[] = new char[5];

		// Another way of declaration
		// Class-or-datatype name[] = {'','','',''}; // similar datatype // static
		int arr1[]={4,6,34,55,900,1209};

		// name[index]=value; // sequential
		arr[0]='1';
		arr[1]='a';
		arr[2]=']';
		arr[3]=';';
		arr[4]='~';

//System.out.println(arr[01234]);

// for ( declaration ; comparison ; increment or decrement)
//{
//}
		for(int i=0;i<arr1.length;i++)
		{
			//get the value from array
			// name[index];
			System.out.println(arr1[i]);
		}

	}


=====================1.========================================
1. create a sample for int array and print.
2. create a sample for float array and print.
